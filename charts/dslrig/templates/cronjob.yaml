{{- range $type := $.Values.types }}
{{- if $type.enabled }}
---
apiVersion: {{ include "common.capabilities.cronjob.apiVersion" $ }}
kind: CronJob
metadata:
  name: {{ template "dslrig.cronjob" $ }}-{{ $type.name }}
  namespace: {{ $.Release.Namespace }}
spec:
  {{- if eq $type.name "full" }}
  suspend: false
  {{- end }}
  {{- if eq $type.name "sanity" }}
  suspend: true
  {{- end }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1  # remove jobs which are successfully executed
  failedJobsHistoryLimit: 1      # except 1 recent failed job, remove jobs which are not successfully executed
  #schedule: '*/3 * * * *' # cron spec of time
  schedule: {{ $.Values.crontime }}
  jobTemplate:
    spec:
      backoffLimit: 0 # this has very low chance of failing, as all this does
                      # is prompt kubernetes to schedule new replica set for
      # the deployment
      # activeDeadlineSeconds: 600 # timeout, makes most sense with
      # "waiting for rollout" variant specified below
      template:
        spec:
          serviceAccountName: {{ template "dslrig.serviceAccountName" $ }}
          restartPolicy: Never
          initContainers:
            - name: volume-permissions
              image: {{ include "common.images.image" (dict "imageRoot" $.Values.containers.dslorchestrator.image "global" $.Values.global) }}
              imagePullPolicy: {{ $.Values.containers.dslorchestrator.image.pullPolicy }}
              securityContext:
                runAsUser: 0
              command:
                - /bin/bash
                - -c
                - chown -R mosip:mosip
                  {{- range $key, $value := $.Values.containers }}
                  {{- if $value.volumes }}
                  {{- range $value.volumes }}
                  {{ .mountDir }}
                  {{- end }}
                  {{- end }}
                  {{- end }}
              volumeMounts:
              {{- range $key, $value := (omit $.Values.containers "authdemo" ) }}
              {{- if $value.volumes }}
              {{- range $value.volumes  }}
              - name: {{ .pvc_name }}
                mountPath: {{ .mountDir }}
              {{- end }}
              {{- end }}
              {{- end }}
            {{- if $.Values.enable_insecure }}
            {{- include "common.tplvalues.render" (dict "value" $.Values.initContainers "context" $) | nindent 12 }}
            {{- end }}
          containers:
          {{ range $key, $value := $.Values.containers }}
          - name: {{ $key }}
            image: {{ include "common.images.image" (dict "imageRoot" $value.image "global" $.Values.global) }}
            imagePullPolicy: {{ $value.image.pullPolicy }}
            {{- if $.Values.lifecycleHooks }}
            lifecycle: {{- include "common.tpvalues.render" (dict "value" $.Values.lifecycleHooks "context" $) | nindent 12 }}
            {{- end }}
            {{- if $.Values.containerSecurityContext.enabled }}
            securityContext: {{- omit $.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
            {{- end }}
            {{- if $value.command }}
            command:
              - {{- $value.command | quote | indent 1 }}
            {{- end }}
            {{- if $value.args }}
            args:
            {{- range $value.args }}
              - {{- . | quote | indent 1 }}
            {{- end }}
            {{- end }}
            env:
            {{- if $.Values.extraEnvVars }}
            {{- include "common.tpvalues.render" (dict "value" $.Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
            {{- if eq $type.name "full" }}
              - name: TESTLEVEL
                value: "full"
            {{- end }}
            {{- if eq $type.name "sanity" }}
              - name: TESTLEVEL
                value: "sanity"
            {{- end }}
            {{- if $value.envVars }}
            {{- range $envName, $envValue := $value.envVars }}
              - name: {{ $envName  }}
                value: {{ $envValue }}
            {{- end }}
            {{- end }}
            envFrom:
            {{- if $value.envVarsCM }}
            {{- range $value.envVarsCM }}
              - configMapRef:
                  name: {{ . }}
            {{- end }}
            {{- end }}
            {{- if $value.envVarsSecret }}
            {{- range $value.envVarsSecret }}
              - secretRef:
                  name: {{ . }}
            {{- end }}
            {{- end }}
            ports:
              - name: spring-service
                containerPort: {{ $value.springServicePort }}
            {{- if $value.healthcheck.startupProbe.enabled }}
            startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit $value.healthcheck.startupProbe "enabled") "context" $) | nindent 14 }}
            {{- end }}
            {{- if $value.healthcheck.livenessProbe.enabled }}
            livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit $value.healthcheck.livenessProbe "enabled") "context" $) | nindent 14 }}
            {{- end }}
            {{- if $value.healthcheck.readinessProbe.enabled }}
            readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit $value.healthcheck.readinessProbe "enabled") "context" $) | nindent 14 }}
            {{- end }}
            {{- if $.Values.resources }}
            resources: {{- toYaml $.Values.resources | nindent 14 }}
            {{- end }}
            volumeMounts:
              - name: del-cm
                mountPath: /home/mosip/scripts/
              {{- if $value.volumes }}
              {{- range $value.volumes }}
              - name: {{ .pvc_name }}
                mountPath: {{ .mountDir }}
              {{- end }}
              {{- end }}
              {{- if $.Values.enable_insecure }}
              - mountPath: /usr/local/openjdk-11/lib/security/cacerts
                name: cacerts
                subPath: cacerts
              {{- end }}
          {{- end }}
          volumes:
          {{- range $volume_name, $volume := $.Values.volumes }}
          {{- if and $volume.enabled (not $volume.existingClaim) }}
          - name: {{ $volume_name }}
            persistentVolumeClaim:
              claimName: {{ $volume_name }}
          {{- end }}
          {{- end }}
          {{- if $.Values.enable_insecure }}
          - name: cacerts
            emptyDir: {}
          {{- end }}
          - name: del-cm
            configMap:
              name: del
              defaultMode: 511
{{- end }}
{{- end }}
