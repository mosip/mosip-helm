apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "keycloak-init.fullname" . }}
  labels:
    {{- include "keycloak-init.labels" . | nindent 4 }}
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        {{- include "keycloak-init.selectorLabels" . | nindent 8 }}
        sidecar.istio.io/inject: "false"
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "keycloak-init.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.jobSecurityContext | nindent 8 }}
      restartPolicy: Never  # This is one time job
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          {{- $globalSecretName := include "common.secrets.name" (dict "existingSecret" .Values.keycloak.existingSecret "context" $) }}
          - name: KEYCLOAK_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.keycloak.admin.secret.existingSecret }}
                key: {{ .Values.keycloak.admin.secret.key }}
          - name: KEYCLOAK_SERVER_URL
            valueFrom:
               configMapKeyRef:
                 name: {{ .Values.keycloak.host.existingConfigMap }} 
                 key:  {{ .Values.keycloak.host.key }} 
          - name: KEYCLOAK_ADMIN_USER
            valueFrom:
               configMapKeyRef:
                 name: {{ .Values.keycloak.admin.userName.existingConfigMap }} 
                 key:  {{ .Values.keycloak.admin.userName.key }} 
          - name: FRONTEND_URL
            value: {{ .Values.frontend }}
          - name:  INPUT_FILE
            value: input.yaml  # Must match below file name in the mount
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
          - secretRef:
              name: keycloak-client-secrets
          {{- if .Values.extraEnvVarsCM }}
          {{- range .Values.extraEnvVarsCM }}
          - configMapRef:
              name: {{ . }}
          {{- end }}
          {{- end }}
          {{- if .Values.extraEnvVarsSecret }}
          {{- range .Values.extraEnvVarsSecret }}
          - secretRef:
              name: {{ . }}
          {{- end }}
          {{- end }}

          volumeMounts:
            - name: keycloak-init-input
              mountPath: /opt/mosip/input/input.yaml # Same as INPUT_DIR/INPUT_FILE in docker
              subPath: input.yaml # INPUT_FILE in docker
      volumes:
        - name: keycloak-init-input
          configMap:
            name: {{ printf "%s-configuration" (include "keycloak-init.fullname" .) }}

