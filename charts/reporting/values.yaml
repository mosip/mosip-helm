debezium:
  enabled: true
  replicaCount: 1
  image: debezium/connect:1.7.0.Final
  imagePullPolicy: Always
  port: 8083
  startupProbe:
    enabled: true
    httpGet:
      path: /connectors
      port: 8083
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
  livenessProbe:
    enabled: true
    httpGet:
      path: /connectors
      port: 8083
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    httpGet:
      path: /connectors
      port: 8083
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  fixer_container:
    image: mosipqa/debezium-fixer:develop
    imagePullPolicy: Always
    startup_delay: "30s"
    probe_time_period: "30s"
    error_level1: "failed"
    error_level2: "PSQLException: An I/O error occurred while sending to the backend"
    startupProbe:
      enabled: true
      exec:
        command:
        - '/bin/bash'
        - '-c'
        - 'CHK_ENTRYPOINT=$( ps | grep -v "grep" | grep -c ./docker-entrypoint.sh );
           if [ $CHK_ENTRYPOINT = 0 ]; then
              echo "ENTRYPOINT Scipt not running; EXITING";
              exit 1;
           fi'
      initialDelaySeconds: 0
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 30
      successThreshold: 1
    livenessProbe:
      enabled: true
      exec:
        command:
          - '/bin/bash'
          - '-c'
          - 'CHK_ENTRYPOINT=$( ps | grep -v "grep" | grep -c ./docker-entrypoint.sh );
           if [ $CHK_ENTRYPOINT = 0 ]; then
              echo "ENTRYPOINT Scipt not running; EXITING";
              exit 1;
           fi'
      initialDelaySeconds: 20
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
    readinessProbe:
      enabled: true
      exec:
        command:
          - '/bin/bash'
          - '-c'
          - 'CHK_ENTRYPOINT=$( ps | grep -v "grep" | grep -c ./docker-entrypoint.sh );
           if [ $CHK_ENTRYPOINT = 0 ]; then
              echo "ENTRYPOINT Scipt not running; EXITING";
              exit 1;
           fi'
      initialDelaySeconds: 0
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1

  kafka:
    server: "kafka:9092"
    groupId: "1"
    topics:
      offset: debez-connect-offsets
      config: debez-connect-configs
      status: debez-connect-status

kafkaClient:
  enabled: true
  image: confluentinc/cp-kafka
  db_secretref:
    name: postgres-postgresql
    key: postgresql-password

bitnami-kafka:
  fullnameOverride: kafka
  enabled: true
  replicaCount: 4
  persistence:
    enabled: false
  zookeeper:
    fullnameOverride: kafka-zookeeper
    enabled: true
    replicaCount: 4
    persistence:
      enabled: false

confluentinc:
  enabled: true

  cp-zookeeper:
    enabled: false
  cp-kafka:
    enabled: false
  cp-kafka-rest:
    enabled: false
  cp-schema-registry:
    enabled: false
  cp-ksql-server:
    enabled: false
  cp-control-center:
    enabled: false

  cp-kafka-connect:
    enabled: true

    nameOverride: es-connect
    fullnameOverride: es-connect

    replicaCount: 1

    image: mosipqa/cp-kafka-connect-es
    imageTag: develop
    imagePullPolicy: Always

    ## Configure extra options for liveness and readiness probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ##


    kafka:
      bootstrapServers: kafka:9092

    prometheus:
      jmx:
        enabled: false

    configurationOverrides:
      config.storage.replication.factor: "1"
      key.converter.schemas.enable: "false"
      offset.storage.replication.factor: "1"
      plugin.path: /usr/share/java,/usr/share/confluent-hub-components
      replication.factor: "1"
      status.storage.replication.factor: "1"
      value.converter.schemas.enable: "false"
      zookeeper.connect: zookeeper:2181
    customEnv: {}

bitnami-elasticsearch:
  enabled: true
  global:
    kibanaEnabled: true
  data:
    fullnameOverride: elasticsearch-data
    heapSize: 728m
    persistence:
      enabled: false
    resources:
      requests:
        memory: 512Mi
  master:
    fullnameOverride: elasticsearch-master
    heapSize: 1024m
    persistence:
      enabled: false
    resources:
      requests:
        memory: 728Mi
  coordinating:
    fullnameOverride: elasticsearch-coordinating-only
  kibana:
    fullnameOverride: kibana
    persistence:
      enabled: false
