apiVersion: {{ include "common.capabilities.cronjob.apiVersion" $ }}
kind: CronJob
metadata:
  name: {{ template "deletecron.cronjob" $ }}
  namespace: {{ $.Release.Namespace }}

spec:
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1  # remove jobs which are successfully executed
  failedJobsHistoryLimit: 1      # except 1 recent failed job, remove jobs which are not successfully executed
  #schedule: '*/1 * * * *' # cron spec of time, here, 8 o'clock
  schedule: {{ .Values.crontime }}
  jobTemplate:
    spec:
      backoffLimit: 2 # this has very low chance of failing, as all this does
      # is prompt kubernetes to schedule new replica set for
      # the deployment
      # activeDeadlineSeconds: 600 # timeout, makes most sense with
      # "waiting for rollout" variant specified below
      template:
        spec:
          serviceAccountName: my-service-account
          restartPolicy: Never
          containers:
            - name: kubectl
              image: bitnami/kubectl
              imagePullPolicy: {{ $.Values.image.pullPolicy }}
              {{- if $.Values.lifecycleHooks }}
              lifecycle: {{- include "common.tpvalues.render" (dict "value" $.Values.lifecycleHooks "context" $) | nindent 12 }}
              {{- end }}
              {{- if $.Values.containerSecurityContext.enabled }}
              securityContext: {{- omit $.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
              {{- end }}
              command: ["/bin/bash", "-c"]
              args:
                - kubectl delete pods -n dslrig --field-selector=status.phase==Succeeded && kubectl delete pods -n apitestrig --field-selector=status.phase==Succeeded
              env:
                - name: container_user
                  value: {{ $.Values.containerSecurityContext.runAsUser }}
                - name: JDK_JAVA_OPTIONS
                  value: {{ $.Values.additionalResources.javaOpts }}
                {{- if $.Values.extraEnvVars }}
                {{- include "common.tpvalues.render" (dict "value" $.Values.extraEnvVars "context" $) | nindent 12 }}
                {{- end }}
              envFrom:
                {{- if $.Values.extraEnvVarsCM }}
                  {{- range $.Values.extraEnvVarsCM }}
                  - configMapRef:
                      name: {{ . }}
                  {{- end }}
                  {{- end }}
                  {{- if $.Values.extraEnvVarsSecret }}
                  {{- range $.Values.extraEnvVarsSecret }}
                  - secretRef:
                      name: {{ . }}
                  {{- end }}
                  {{- end }}