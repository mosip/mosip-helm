{{- range $type := $.Values.types }}
{{- if $type.enabled }}
---
apiVersion: {{ include "common.capabilities.cronjob.apiVersion" $ }}
kind: CronJob
metadata:
  name: {{ template "pmptest.cronjob" $ }}-{{ $type.name }}
  namespace: {{ $.Release.Namespace }}

spec:
  {{- if eq $type.name "full" }}
  suspend: false
  {{- end }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1  # remove jobs which are successfully executed
  failedJobsHistoryLimit: 1      # except 1 recent failed job, remove jobs which are not successfully executed
  #schedule: '*/3 * * * *' # cron spec of time
  schedule: {{ $.Values.crontime }}
  jobTemplate:
    spec:
      backoffLimit: 0 # this has very low chance of failing, as all this does
                      # is prompt kubernetes to schedule new replica set for
      # the deployment
      # activeDeadlineSeconds: 600 # timeout, makes most sense with
      # "waiting for rollout" variant specified below
      template:
        spec:
          # account configured above
          restartPolicy: Never
          initContainers:
            {{- if and $.Values.volumePermissions.enabled $.Values.persistence.enabled }}
            - name: volume-permissions
              image: {{ template "pmptest.image" $ }}
              imagePullPolicy: {{ $.Values.volumePermissions.image.pullPolicy | quote }}
              command:
                - /bin/bash
                - -c
              securityContext:
                runAsUser: 0
              {{- if $.Values.volumePermissions.resources }}
              resources: {{- toYaml $.Values.volumePermissions.resources | nindent 16 }}
              {{- end }}

              {{- if $.Values.volumePermissions.resources }}
              resources: {{- toYaml $.Values.volumePermissions.resources | nindent 16 }}
              env:
                {{- if $.Values.extraEnvVars }}
                {{- include "common.tpvalues.render" (dict "value" $.Values.extraEnvVars "context" $) | nindent 12 }}
                {{- end }}
              envFrom:
                {{- if $.Values.extraEnvVarsCM }}
                  {{- range $.Values.extraEnvVarsCM }}
                  - configMapRef:
                      name: {{ . }}
                  {{- end }}
                  {{- end }}
                  {{- if $.Values.extraEnvVarsSecret }}
                  {{- range $.Values.extraEnvVarsSecret }}
                  - secretRef:
                      name: {{ . }}
                  {{- end }}
                  {{- end }}
              {{- end }}
            {{- end }}
            {{- if $.Values.enable_insecure }}
            {{- include "common.tplvalues.render" (dict "value" $.Values.initContainers "context" $) | nindent 12 }}
            {{- end }}
          containers:
          - name: {{ template "pmptest.serviceAccountName" $ }}-{{ $type.name }}
            image: {{ template "pmptest.image" $ }}
            imagePullPolicy: {{ $.Values.image.pullPolicy }}
            {{- if $.Values.lifecycleHooks }}
            lifecycle: {{- include "common.tpvalues.render" (dict "value" $.Values.lifecycleHooks "context" $) | nindent 12 }}
            {{- end }}
            {{- if $.Values.containerSecurityContext.enabled }}
            securityContext: {{- omit $.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
            {{- end }}
            {{- if $.Values.command }}
            command: {{- include "common.tpvalues.render" (dict "value" $.Values.command "context" $) | nindent 12 }}
            {{- end }}
            {{- if $.Values.args }}
            args: {{- include "common.tpvalues.render" (dict "value" $.Values.args "context" $) | nindent 12 }}
            {{- end }}
            env:
                - name: container_user
                  value: {{ $.Values.containerSecurityContext.runAsUser }}
                - name: JDK_JAVA_OPTIONS
                  value: {{ $.Values.additionalResources.javaOpts }}
              {{- if $.Values.extraEnvVars }}
              {{- include "common.tpvalues.render" (dict "value" $.Values.extraEnvVars "context" $) | nindent 12 }}
              {{- end }}
              {{- if eq $type.name "full" }}
                - name: TESTLEVEL
                  value: "full"
              {{- end }}
            envFrom:
              {{- if $.Values.extraEnvVarsCM }}
                {{- range $.Values.extraEnvVarsCM }}
                  - configMapRef:
                        name: {{ . }}
                {{- end }}
                {{- end }}
                {{- if $.Values.extraEnvVarsSecret }}
                {{- range $.Values.extraEnvVarsSecret }}
                  - secretRef:
                        name: {{ . }}
                {{- end }}
                {{- end }}
            ports:
                - name: spring-service
                  containerPort: {{ $.Values.springServicePort }}
          {{- if $.Values.enable_insecure }}
          - name: cacerts
            emptyDir: {}
          {{- end }}
{{- end }}
{{- end }}
