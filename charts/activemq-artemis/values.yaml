image:
  # image.registry is the repository where the ActiveMQ Artemis image is stored
  registry: docker.io
  # image.repository is the ActiveMQ Artemis image name
  # repository: vromero/activemq-artemis
  repository: mosipqa/activemq-artemis

  # image.tag is the ActiveMQ Artemis image's tag: https://hub.docker.com/r/vromero/activemq-artemis/tags
  # tag: 2.16.0
  tag: 1.1.5
  # image.pullPolicy is the ActiveMQ Artemis image's pull policy
  pullPolicy: Always
  # image.pullSecrets optionally specify an array of imagePullSecrets.Secrets must be manually created in the namespace.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  pullSecrets: []

# artemisUser sets the artemis admin user name
artemisUser: artemis
# artemisPassword sets the artemis admin user password
artemisPassword: ""

replicas: 1

# antiAffinity sets an anti affinity policy between masters and slaves as either hard or soft, default is hard
antiAffinity: "soft"

# nameOverride replaces the computed chart name with this given name.
# nameOverride:

# namePrefix sets the prefix for the fullname in the template "global prefix + prefix + name + suffix + global suffix"
# namePrefix:

# nameSuffix sets the suffix for the fullname in the template "global prefix + prefix + name + suffix + global suffix"
# nameSuffix:

global: {}
# namePrefix sets the global prefix for the fullname in the template "global prefix + prefix + name + suffix + global suffix"
#   namePrefix: Global prefix
# nameSuffix sets the global suffix for the fullname in the template "global prefix + prefix + name + suffix + global suffix"
#   nameSuffix: Global suffix

deployment:
  ## Artemis Deployment annotations
  annotations: {}
  #   name: value
replica:
  ## Artemis Replicas annotations
  annotations: {}

  ## Read more about kube2iam to provide access to s3 https://github.com/jtblin/kube2iam
  #   iam.amazonaws.com/role: role-arn

## Persist data to a persitent volume
persistence:
  testJournalPerformance: AUTO
  enabled: true
  ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
  ## Default: volume.alpha.kubernetes.io/storage-class: default
  ##
  # storageClass:
  accessMode: ReadWriteOnce
  size: 8Gi

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    cpu: 2000m
    memory: 8000Mi
  requests:
    memory: 512Mi
    cpu: 200m

service:
  type: ClusterIP
  annotations: {}

## Prometheus Exporters / Metrics
##
prometheus:

  ## Prometheus JMX Exporter: exposes the majority of Kafkas metrics
  jmx:
    ## Interval at which Prometheus scrapes metrics, note: only used by Prometheus Operator
    interval: 10s

    ## Timeout at which Prometheus timeouts scrape run, note: only used by Prometheus Operator
    scrapeTimeout: 10s

    ## Port jmx-exporter exposes Prometheus format metrics to scrape
    port: 5556

  operator:
    ## Are you using Prometheus Operator?
    enabled: false

    serviceMonitor:
      # Namespace Prometheus is installed in
      namespace: monitoring

      ## Defaults to whats used if you follow CoreOS [Prometheus Install Instructions](https://github.com/coreos/prometheus-operator/tree/master/helm#tldr)
      ## [Prometheus Selector Label](https://github.com/coreos/prometheus-operator/blob/master/helm/prometheus/templates/prometheus.yaml#L65)
      ## [Kube Prometheus Selector Label](https://github.com/coreos/prometheus-operator/blob/master/helm/kube-prometheus/values.yaml#L298)
      selector:
        prometheus: kube-prometheus

## Ingress configuration
## Ingress is only enabled for external access of web console. Usually, activemq's load balancer that exposes 61616
## will has internal IP as in production deployments ABIS is assumed to be inside the network.  However, for debugging
## and testing we may need the console to have external access.
##
ingress:
  ## Set to true to enable ingress record generation
  ##
  enabled: false

  ## Set this to true in order to add the corresponding annotations for cert-manager
  ##
  certManager: false

  ## When the ingress is enabled, a host pointing to this will be created
  ##
  hostname: "activemq.xyz.net"

  ## Override API Version (automatically detected if not set)
  ##
  apiVersion: ""

  ## Ingress Path
  ##
  path: /

  ## Ingress Path type
  ##
  pathType: ImplementationSpecific

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  ##
  annotations: {}

  ## Enable TLS configuration for the hostname defined at ingress.hostname parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret, relay on cert-manager to create it, or
  ## let the chart create self-signed certificates for you
  ##
  tls: false

  ## The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## Example:
  ## extraHosts:
  ##   - name: activemq.xyz.net
  ##     path: /
  ##
  extraHosts: []

  ## The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## Example:
  ## extraTls:
  ## - hosts:
  ##     - activemq.xyz.net
  ##   secretName: activemq.xyz.net-tls
  ##
  extraTls: []

  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
  ## name should line up with a secretName set further up
  ##
  ## If it is not set and you're using cert-manager, this is unneeded, as it will create the secret for you
  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ##
  ## Example
  ## secrets:
  ##   - name: aspnet-core.local-tls
  ##     key: ""
  ##     certificate: ""
  ##
  secrets: []

  ## The service port to be used by this ingress.
  ## Default is http. Alternative is https.
  servicePort: http

ports:
  activemq: 61616
  webconsole: 8161
  amqp: 5672

istio:
  enabled: true
  hosts:
    - activemq.sandbox.xyz.net
  ## Associate with either public or internal ingress controllers
  ingressController:
    name: ingressgateway-internal
  prefix: /
